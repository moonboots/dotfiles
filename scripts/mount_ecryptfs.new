#!/bin/sh -eu
#
# TODO
# check for existence of shred and other required commands
# check if scrypt encrypted password is file (waste time if accidentally input directory)
# trap and clean!
#
# Loads encrypted ecryptfs password into keyring, mounts ecryptfs, unloads password
export PATH=/bin:/usr/bin

# usage() {
#   echo "Ecryptfs mount settings should already be in fstab"
#   echo "Usage: $0 [path to scrypt encrypted file] [path to mount]"
#   exit 1
# }

type shred >/dev/null 2>&1 || { echo >&2 "shred command is required, exiting"; exit 1; }

encrypted_passphrase_file=$1
encrypted_folder=$2
decrypted_folder=$3

# make subsequent files and directories accessible only to current user
umask 077
TMPDIR="$(mktemp -d /tmp/mount_ecryptfs.XXXXXX)"
unprefixed_decrypted_passphrase_file=$TMPDIR/original_decrypted
decrypted_passphrase_file=$TMPDIR/prefixed_decrypted

cleanup() {
  [ -d "$TMPDIR" ] && find $TMPDIR -type f -exec shred -uz {} \; || true
  [ -d "$TMPDIR" ] && rmdir $TMPDIR || true
  sync
}

trap cleanup INT TERM EXIT

scrypt=/usr/bin/scrypt
$scrypt dec $encrypted_passphrase_file $unprefixed_decrypted_passphrase_file

# encrypted password file will contain password only
# ecryptfs requires file to be prepended with "passphrase_passwd=", so we do
# this in another file
printf "passphrase_passwd=" >> $decrypted_passphrase_file
cat $unprefixed_decrypted_passphrase_file >> $decrypted_passphrase_file
shred -uz $unprefixed_decrypted_passphrase_file

# mount with sudo to prevent need for fstab entry
#
# I whitelist /bin/mount -t ecryptfs in the sudoers file to prevent two password prompts, one for sudo access and one for decryption.
#
# Apart from the decryption password, will also prompt for filname encryption
# key. This key is derived from the password and the default is already
# provided. I can't find a mount option that accepts the default, so the user
# must manually press enter.
sudo mount -t ecryptfs \
-o ecryptfs_enable_filename_crypto=y,\
user,\
rw,\
exec,\
noatime,\
ecryptfs_passthrough=n,\
key=passphrase:passphrase_passwd_file=$decrypted_passphrase_file,\
no_sig_cache,\
ecryptfs_cipher=aes,\
ecryptfs_key_bytes=16,\
ecryptfs_unlink_sigs \
$encrypted_folder $decrypted_folder
